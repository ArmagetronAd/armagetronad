module AAConfig
  
  # Paths are relative the Rakefile
  SRC_DIR = File.expand_path(File.dirname(__FILE__) + "/..")
  
  BUILD_DIR = File.expand_path((ENV["SYMROOT"] || "#{SRC_DIR}/../armagetronad-build/build") + "/..")
  
  PRODUCT_NAME = ENV["PRODUCT_NAME"] || "Armagetron Advanced"
  
  PACKGAGE_RESOURCE_DIR = [
    ENV["CONFIGURATION_BUILD_DIR"] || "",
    PRODUCT_NAME + (ENV["WRAPPER_SUFFIX"] || ""),
    PRODUCT_NAME[/dedicated/i] ? "" : "Contents/Resources"
  ].join("/")
    
  
  BUILD_TYPE = File.exists?(SRC_DIR + "/.svn") ? :development : :release
  
  def self.process_file(orig, package_dir=nil)
    result_file = (BUILD_DIR + "/" + orig).sub(/\.in$/, '')
    orig = SRC_DIR + "/" + orig
    
    # Process the file (replace tags, copy to build dir)
    file result_file => [orig] do |t|
      mkdir_p(File.dirname(t.name))
      cp(t.prerequisites[0], t.name)
      
      # replace the tags
      open(t.name, "r+") do |f|
        data = f.read
        TAG_MAPPINGS.each { |tag, value| data.gsub!("@#{tag}@", value) }
        f.rewind
        f.print(data)
        f.truncate(f.pos)
      end      
    end
    task :process_files => result_file
    
    # Should the file be included with the game dist?
    if package_dir
      package_dest = PACKGAGE_RESOURCE_DIR + "/" + package_dir + "/" + File.basename(result_file)
      file package_dest => [result_file] do |t|
        mkdir_p(File.dirname(t.name))
        cp(t.prerequisites[0], t.name)
      end
      task :package_files => package_dest
    end
    
  end
    
  def self.version
    if BUILD_TYPE == :development
      %x("#{SRC_DIR}/batch/make/version" "#{SRC_DIR}").chomp
    else
      File.read("#{SRC_DIR}/src/macosx/version.h.in").scan(/#define VERSION "(.*)"/)[0][0]
    end
  end
    
  TAG_MAPPINGS = {
    "version" => version(),
    "year" => Time.now.strftime("%Y"),
    "progtitle" => "Armagetron Advanced",
    "top_srcdir" => SRC_DIR,
    "CPPFLAGS" => %{-I/Library/Frameworks/ArmagetronAdvanced/current/SDL.framework/Headers -I#{SRC_DIR}/src/macosx/client -I#{SRC_DIR}/src/macosx},
    "top_builddir" => SRC_DIR + "/src"
  }
  
end

# ========
# = SWIG =
# ========

namespace "swig" do
  swig_file = "#{AAConfig::SRC_DIR}/src/swig/ext/armagetronad.i"
  result_swig_file = "#{AAConfig::BUILD_DIR}/src/swig/ext/armagetronad_wrap.cxx"
  swig_file_dependencies = FileList["#{AAConfig::SRC_DIR}/src/swig/ext/**/*"]
  file(result_swig_file => [swig_file, *swig_file_dependencies]) do |t|
    mkdir_p(File.dirname(t.name))
    sh %{swig -c++ -ruby -autorename \\
      -I#{AAConfig::SRC_DIR}/src/engine \\
      -I#{AAConfig::SRC_DIR}/src/network \\
      -I#{AAConfig::SRC_DIR}/src/render \\
      -I#{AAConfig::SRC_DIR}/src/tools \\
      -I#{AAConfig::SRC_DIR}/src/tron \\
      -I#{AAConfig::SRC_DIR}/src/ui \\
      -I#{AAConfig::SRC_DIR}/src/macosx/client \\
      -I#{AAConfig::SRC_DIR}/src/macosx \\
      -o #{t.name} \\
      #{t.prerequisites[0]}
    }
  end
  task "interface-file" => result_swig_file
  
  extconf_file = "#{AAConfig::SRC_DIR}/src/swig/ext/extconf.rb.in"
  result_extconf_file = "#{AAConfig::BUILD_DIR}/src/swig/ext/extconf.rb"
  file(result_extconf_file => extconf_file) do |t|
    cp(t.prerequisites[0], t.name)
    open(t.name, "r+") do |f|
      data = f.read
      AAConfig::TAG_MAPPINGS.each { |tag, value| data.gsub!("@#{tag}@", value) }
      f.rewind
      f.print(data)
      f.truncate(f.pos)
    end
  end
  task "extconf.rb" => result_extconf_file
  
  result_setup_file = "#{AAConfig::BUILD_DIR}/src/swig/setup.rb"
  file(result_setup_file => "#{AAConfig::SRC_DIR}/src/swig/setup.rb") do |t|
    cp(t.prerequisites[0], t.name)
  end
  task "setup.rb" => result_setup_file
  
  task "run" => %w[interface-file extconf.rb setup.rb] do
    sh %{cd "#{AAConfig::BUILD_DIR}/src/swig" && ruby1.8 setup.rb}
  end
end

# =========
# = Xcode =
# =========

namespace "xcode" do
  
  task :prepare => [:process_files, :sort_resources]
  task :cleanup => [:package_files, :package_resouces]
  
  task :sort_resources do
    if !File.exists?("#{AAConfig::BUILD_DIR}/resource")
      if AAConfig::BUILD_TYPE == :development
        sh %{"#{AAConfig::SRC_DIR}/batch/make/sortresources" \\
             "#{AAConfig::SRC_DIR}/resource/proto" \\
             "#{AAConfig::BUILD_DIR}/resource/included" \\
             "#{AAConfig::SRC_DIR}/batch/make/sortresources.py"}
      else
        cp_r("#{AAConfig::SRC_DIR}/resource", AAConfig::BUILD_DIR)
      end
    end
    
  end
  
  task :package_resouces do
    if !File.exists?("#{AAConfig::PACKGAGE_RESOURCE_DIR}/resource")
      cp_r("#{AAConfig::BUILD_DIR}/resource", AAConfig::PACKGAGE_RESOURCE_DIR)
    end
  end

  AAConfig.process_file("src/macosx/version.h.in")
  AAConfig.process_file("src/macosx/English.lproj/InfoPlist.strings.in", "English.lproj")
  AAConfig.process_file("config/aiplayers.cfg.in", "config")  
  AAConfig.process_file("language/languages.txt.in", "language")
  
end

# ==================
# = Beautification =
# ==================

desc "Uses project defaults and updates file timestamps"
task "rebeautify" do
  #
  sh %{ARTISTIC_STYLE_OPTIONS="#{AAConfig::SRC_DIR}/config/astylerc" \\
       "#{AAConfig::SRC_DIR}/batch/make/beautify" -t "#{AAConfig::SRC_DIR}" "#{AAConfig::SRC_DIR}/.beautytag.re"}
end

desc "Switches between your settings (beautify-personal) to the project defaults and leaves timestamps untouched"
task "beautify" do
  rm_f %{"#{AAConfig::SRC_DIR}/.beautytag.personal"}
  sh %{ARTISTIC_STYLE_OPTIONS="#{AAConfig::SRC_DIR}/config/astylerc" \\
       "#{AAConfig::SRC_DIR}/batch/make/beautify" "#{AAConfig::SRC_DIR}" "#{AAConfig::SRC_DIR}/.beautytag"}
end

desc "Uses your personal settings. Run “rake beautify” before commit!"
task "beautify-personal" do
  rm_f %{"#{AAConfig::SRC_DIR}/.beautytag"}, %{"#{AAConfig::SRC_DIR}/.beautytag.re"}
  sh %{ARTISTIC_STYLE_OPTIONS=$HOME/.astylerc \\
       "#{AAConfig::SRC_DIR}/batch/make/beautify" "#{AAConfig::SRC_DIR}" "#{AAConfig::SRC_DIR}/.beautytag.personal"}
end

task "remove-version" do
  rm_rf("#{AAConfig::BUILD_DIR}/src/macosx")
end

desc "Update version"
task :update_version => ["remove-version", "xcode:process_files"]
