module AAConfig
  
  # Paths are relative the Rakefile
  SRC_DIR = ".."
  
  BUILD_DIR = (ENV["SYMROOT"] || "#{SRC_DIR}/../armagetronad-build/build") + "/.."
  
  PRODUCT_NAME = ENV["PRODUCT_NAME"] || "Armagetron Advanced"
  
  PACKGAGE_RESOURCE_DIR = [
    ENV["CONFIGURATION_BUILD_DIR"] || "",
    PRODUCT_NAME + (ENV["WRAPPER_SUFFIX"] || ""),
    PRODUCT_NAME[/dedicated/i] ? "" : "Contents/Resources"
  ].join("/")
    
  
  BUILD_TYPE = File.exists?(SRC_DIR + "/.svn") ? :development : :release
  
  def self.process_file(orig, package_dir=nil)
    result_file = (BUILD_DIR + "/" + orig).sub(/\.in$/, '')
    orig = SRC_DIR + "/" + orig
    
    # Process the file (replace tags, copy to build dir)
    file result_file => [orig] do |t|
      mkdir_p(File.dirname(t.name))
      cp(t.prerequisites[0], t.name)
      
      # replace the tags
      open(t.name, "r+") do |f|
        data = f.read
        TAG_MAPPINGS.each { |tag, value| data.gsub!("@#{tag}@", value) }
        f.rewind
        f.print(data)
        f.truncate(f.pos)
      end      
    end
    task :process_files => result_file
    
    # Should the file be included with the game dist?
    if package_dir
      package_dest = PACKGAGE_RESOURCE_DIR + "/" + package_dir + "/" + File.basename(result_file)
      file package_dest => [result_file] do |t|
        mkdir_p(File.dirname(t.name))
        cp(t.prerequisites[0], t.name)
      end
      task :package_files => package_dest
    end
    
  end
  
  def self.version
    if BUILD_TYPE == :development
      %x("#{SRC_DIR}/batch/make/version" "#{SRC_DIR}").chomp
    else
      File.read("#{SRC_DIR}/src/macosx/version.h.in").scan(/#define VERSION "(.*)"/)[0][0]
    end
  end
  
  TAG_MAPPINGS = {
    "version" => version(),
    "year" => Time.now.strftime("%Y"),
    "progtitle" => "Armagetron Advanced"
  }
  
end

# =========
# = Xcode =
# =========

namespace "xcode" do
  
  task :prepare => [:process_files, :sort_resources]
  task :cleanup => [:package_files, :package_resouces]
  
  task :sort_resources do
    if !File.exists?("#{AAConfig::BUILD_DIR}/resource")
      if AAConfig::BUILD_TYPE == :development
        sh %{"#{AAConfig::SRC_DIR}/batch/make/sortresources" \\
             "#{AAConfig::SRC_DIR}/resource/proto" \\
             "#{AAConfig::BUILD_DIR}/resource/included" \\
             "#{AAConfig::SRC_DIR}/batch/make/sortresources.py"}
      else
        cp_r("#{AAConfig::SRC_DIR}/resource", AAConfig::BUILD_DIR)
      end
    end
    
  end
  
  task :package_resouces do
    if !File.exists?("#{AAConfig::PACKGAGE_RESOURCE_DIR}/resource")
      cp_r("#{AAConfig::BUILD_DIR}/resource", AAConfig::PACKGAGE_RESOURCE_DIR)
    end
  end

  AAConfig.process_file("src/macosx/version.h.in")
  AAConfig.process_file("src/macosx/English.lproj/InfoPlist.strings.in", "English.lproj")
  AAConfig.process_file("config/aiplayers.cfg.in", "config")  
  AAConfig.process_file("language/languages.txt.in", "language")
  
end

# ==================
# = Beautification =
# ==================

desc "Uses project defaults and updates file timestamps"
task :rebeautify do
  #
  sh %{ARTISTIC_STYLE_OPTIONS="#{AAConfig::SRC_DIR}/config/astylerc" \\
       "#{AAConfig::SRC_DIR}/batch/make/beautify" -t "#{AAConfig::SRC_DIR}" "#{AAConfig::SRC_DIR}/.beautytag.re"}
end

desc "Switches between your settings (beautify-personal) to the project defaults, and leaves timestamps untouched"
task :beautify do
  rm_f %{"#{AAConfig::SRC_DIR}/.beautytag.personal"}
  sh %{ARTISTIC_STYLE_OPTIONS="#{AAConfig::SRC_DIR}/config/astylerc" \\
       "#{AAConfig::SRC_DIR}/batch/make/beautify" "#{AAConfig::SRC_DIR}" "#{AAConfig::SRC_DIR}/.beautytag"}
end

desc "Uses your personal settings. Remeber to run ``rake beautify'' before commit!"
task :beautify_personal do
  rm_f %{"#{AAConfig::SRC_DIR}/.beautytag"}, %{"#{AAConfig::SRC_DIR}/.beautytag.re"}
  sh %{ARTISTIC_STYLE_OPTIONS=$HOME/.astylerc \\
       "#{AAConfig::SRC_DIR}/batch/make/beautify" "#{AAConfig::SRC_DIR}" "#{AAConfig::SRC_DIR}/.beautytag.personal"}
end



task :remove_version do
  rm_rf("#{AAConfig::BUILD_DIR}/src/macosx")
end

desc "Update version"
task :update_version => ["remove_version", "xcode:process_files"]
  # %w(src/network/nNetwork.cpp src/tron/gArmagetron.cpp).each do |f|
  #   touch(AAConfig::SRC_DIR + "/" + f)
  # end