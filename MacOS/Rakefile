module AAConfig
  
  # TODO: update this when branch/0.2.8 is merged to trunk
  def self.version
    ["#{SRC_DIR}/major_version", "#{SRC_DIR}/minor_version"].inject("") { |version, f|
      version + IO.read(f).chomp
    }.gsub(/DATE/, Time.now.strftime("%Y%m%d"))
  end
  
  # Paths are relative the Rakefile
  SRC_DIR = ".."
    
  BUILD_DIR = ENV["SYMROOT"] + "/.."
  
  PACKGAGE_RESOURCE_DIR = [ENV["CONFIGURATION_BUILD_DIR"], ENV["PRODUCT_NAME"] + ENV["WRAPPER_SUFFIX"], "Contents/Resources"].join("/")
  
  # The files that need processing. The key is the file, value is wheter the file will be packaged.
  IN_FILES = {"#{SRC_DIR}/src/macosx/config_common.h.in" => false,
              "#{SRC_DIR}/src/macosx/English.lproj/InfoPlist.strings.in" => true, 
              "#{SRC_DIR}/config/aiplayers.cfg.in" => true,
              "#{SRC_DIR}/language/languages.txt.in" => true}
  
  TAG_MAPPINGS = {"@version@" => version(),
                  "@year@" => Time.now.strftime("%Y"),
                  "@progtitle@" => "Armagetron Advanced"}
    
end

desc "Prepare generated files"
task :prepare => [:process_in_files, :sort_resources]

# TODO: Don't need to run this everytime. Change it to a file based task
task :sort_resources do
  sh %{"#{AAConfig::SRC_DIR}/batch/make/sortresources" \\
       "#{AAConfig::SRC_DIR}/resource/proto" \\
       "#{AAConfig::BUILD_DIR}/resource/included"}
end

AAConfig::IN_FILES.each do |infile, should_package|
  result_file = infile.sub(AAConfig::SRC_DIR, AAConfig::BUILD_DIR).sub(/\.in$/, '')
  
  # Define the task for the resulting file
  file result_file => infile do |t|
    mkdir_p File.dirname(t.name)
    cp t.prerequisites[0], t.name
    open(t.name, 'r+') do |f|
      data = f.read
      AAConfig::TAG_MAPPINGS.each { |tag, value| data.gsub!(tag, value) }      
      f.pos = 0
      f.write(data)
      f.truncate(f.pos)
    end
  end
  task :process_in_files => result_file
  
  # Define the task to package the file
  if should_package
    # builddir/config/foo -> builddir/build/Debug/Armagetron Advanced.app/Contents/Resources/config/foo
    # Currently we all files we package follow the same pattern -- we only need the last two paths
    package_file = AAConfig::PACKGAGE_RESOURCE_DIR + "/" + result_file.split("/")[-2, 2].join("/")
    file package_file => result_file do |t|
      mkdir_p File.dirname(t.name)
      cp t.prerequisites[0], t.name
    end
    task :package_in_files => package_file
  end
  
end

# TODO: file based...
desc "Package files, remove unecessary files, etc."
task :cleanup => [:package_in_files] do
  rm_rf "#{AAConfig::PACKGAGE_RESOURCE_DIR}/resource"
  cp_r "#{AAConfig::BUILD_DIR}/resource", AAConfig::PACKGAGE_RESOURCE_DIR
end
