image: registry.gitlab.com/armagetronad/armagetronad/armaroot_64@sha256:63acc165ff38a835bc9248462fa8c746599435ea4292b866e0ee54157f8f0c8e

variables:
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  #DOCKER_TLS_CERTDIR: "/certs"
  #DOCKER_HOST: ""
  HAS_ARMADEPLOY: "false"

services:
  # required for shared runners, does not hurt for our runner (just some diagnostic complaints)
  - name: docker:19.03.0-dind
    alias: docker

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

stages:
  - minimal_build
  - build_prepare
  - build_base
  - build_main
  - build_collect
  - test
  - stage
  - deploy

default:
  # common before script: bootstrap, configure, make dist, prepare docker builds
  before_script:
    - if ! test -d gitlab_build; then
    -  which docker && docker help > /dev/null
    -  touch timestamp.tag
    -  test "x${ARMAGETRONAD_FAKERELEASE}" == "x" && export ARMAGETRONAD_FAKERELEASE=false
    -  test -r configure || ./bootstrap.sh
    -  cat version.m4
    -  mkdir -p gitlab_build
    -  cd gitlab_build
    -  . ../docker/scripts/brand.sh .
    -  ../configure  --prefix=/usr/local --disable-glout --disable-sysinstall --disable-desktop progname="${PROGRAM_NAME}" progtitle="${PROGRAM_TITLE}"
    -  test "x${ARMAGETRONAD_FAKERELEASE}" == "xtrue" && cp ../docker/build/fakerelease_proto.sh docker/build/fakerelease.sh 
    -  cd docker/build
    -  make CI_prepare -j`nproc || echo 3`
    -  cd ../../../
    - else
    -  find . -newer timestamp.tag ! -path "./gitlab_build" -exec touch -r timestamp.tag \{\} \;
    -  ./docker/scripts/fix_gits.sh || exit $?
    - fi
    
  # cache git checkouts of repositories we depend on
  cache:
    paths:
     - docker/scripts/.cache

# dummy workflow rules to silence spammy gitlab warnings
workflow:
  rules:
    - when: always

# very basic build
build_prepare:
  stage: build_prepare
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: always
    - when: always
  script: [""]
  artifacts:
    untracked: true
    expire_in: 1 week


build_server_32_raw:
  stage: build_base
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh -k result.build_server_32
  after_script:
    - rm -rf gitlab_build/docker/build/context*.dir
  artifacts:
    untracked: true
    expire_in: 1 day

build_server_steam_raw:
  stage: build_base
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh -k result.build_server_steam
  artifacts:
    untracked: true
    expire_in: 1 day

# It seems like GitLab CI, all else being equal, schedules jobs in the order
# listed here. So list the ones that take longest first.
# Windows builds are worst because they have an additional layer of emulation,
# are not parallelized and are client and server build in one.
build_windows:
  needs:
  - build_server_32_raw
  dependencies:
  - build_server_32_raw
  stage: build_main
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh CI_windows
  artifacts:
    paths:
    - gitlab_build/docker/build/
    expire_in: 1 day

build_windows_steam:
  needs:
  - build_server_steam_raw
  dependencies:
  - build_server_steam_raw
  stage: build_main
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh CI_windows_steam
  artifacts:
    paths:
    - gitlab_build/docker/build/
    expire_in: 1 day

# debtest is faster, but also not paralellized
build_debtest:
  dependencies:
  - build_prepare
  stage: build_main
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh CI_debtest
  artifacts:
    paths:
    - gitlab_build/docker/build/
    expire_in: 1 day

# steam builds server and client in one go (the server is already pre-built), they are packed together
build_linux_steam:
  dependencies:
  - build_server_steam_raw
  stage: build_main
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh CI_linux_steam
  artifacts:
    paths:
    - gitlab_build/docker/build/
    expire_in: 1 day

build_client_64:
  dependencies:
  - build_prepare
  stage: build_main
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh CI_linux_client_64
  artifacts:
    paths:
    - gitlab_build/docker/build/
    expire_in: 1 day

build_client_32:
  dependencies:
  - build_prepare
  stage: build_main
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh CI_linux_client_32
  artifacts:
    paths:
    - gitlab_build/docker/build/
    expire_in: 1 day

build_server_64:
  dependencies:
  - build_prepare
  stage: build_main
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh CI_linux_server_64
  artifacts:
    paths:
    - gitlab_build/docker/build/
    expire_in: 1 day

# this one is special, it can rely on previous build work
build_server_32:
  dependencies:
  - build_server_32_raw
  stage: build_main
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh CI_linux_server_32
  artifacts:
    paths:
    - gitlab_build/docker/build/
    expire_in: 1 day

# macOS builds need a special runner, but can start early.
# iIt should build directly from git content, the prepared linux source directories have soft links that won't work.
build_macos:
  needs:
  - build_prepare
  dependencies:
  - build_prepare
  tags:
  - macos
  stage: build_main
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: never
  - when: on_success
  script:
    - docker/scripts/obsolete.sh || exit 0
    - ./bootstrap.sh || exit 0
    - gitlab_build/docker/build/make_ci.sh macOS -j`nproc || echo 3`
  artifacts:
    paths:
    - gitlab_build/docker/build/upload
    - gitlab_build/docker/build/macOS/*.tag
    expire_in: 1 day
    
build_collect:
  stage: build_collect
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: on_success
  - when: on_success
  script:
    - gitlab_build/docker/build/make_ci.sh debtest.tag CI || exit $?
    - rm -rf src
  artifacts:
    untracked: true
    expire_in: 1 week

# deploy to staged environment
deploy_staged:
  dependencies:
   - build_prepare
   - build_collect
  stage: stage
  tags:
   - armagetronad_deploy
  rules:
  - if: $HAS_ARMADEPLOY != "true"
    when: never
  - if: $CI_MERGE_REQUEST_ID
    when: never
  - if: $CI_COMMIT_REF_PROTECTED == "true"
    when: on_success
  - when: never
  before_script:
    - ./docker/scripts/fix_gits.sh || exit $?
    - ./docker/deploy/prepare_deploy.sh || exit $?
  script:
    # now enter the docker build directory and just invoke make there
    - cd gitlab_build/docker/build
    - make staged_deploy -O -j$(nproc) -k


# do the actual release; manually for final releases, delayed to avoid spam for everyone else
delay_release:
  dependencies: []
  stage: stage
  rules:
  - if: $CI_MERGE_REQUEST_ID
    when: never
  - if: $CI_COMMIT_REF_PROTECTED == "false"
    when: never
  - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_TAG'
    when: manual
  - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH'
    when: delayed
    start_in: '16 hours'
  - when: on_success
  before_script: [""]
  script: [""]

# do the actual release; manually for final releases, delayed to avoid spam for everyone else
deploy_release:
  dependencies:
   - build_prepare
   - build_collect
  stage: deploy
  tags:
   - armagetronad_deploy
  rules:
  - if: $HAS_ARMADEPLOY != "true"
    when: never
  - if: $CI_MERGE_REQUEST_ID
    when: never
  - if: $CI_COMMIT_REF_PROTECTED == "true"
    when: on_success
  - when: never
  before_script:
    - ./docker/scripts/fix_gits.sh || exit $?
    - ./docker/deploy/prepare_deploy.sh || exit $?
  script:
    # test whether we're current
    - docker/scripts/obsolete.sh || exit 0

    # build
    - cd gitlab_build/docker/build
    - rm -rf result.appimage_* context.appimage_* # remake appimages, now we can sign them
    - make unstaged_deploy -O -j$(nproc) -k

# test build docker image (hopefully also initiating the cache for later deployment)
# does not really need debtest, but we want to let the Windows builds go first
build_docker:
  stage: build_collect
  needs:
   - build_prepare
   - build_debtest
  dependencies:
   - build_prepare
  after_script:
    - rm -f ~/.docker/config.json
  script:
    - make -C gitlab_build/docker/build build_docker.tag || exit $?

# deploy docker image to staging
stage_docker:
  stage: stage
  needs:
   - build_prepare
   - build_docker
  dependencies:
   - build_prepare
  rules:
   - if: $CI_MERGE_REQUEST_ID
     when: never
   - if: $CI_COMMIT_REF_PROTECTED == "true"
     when: on_success
   - when: never
  after_script:
    - rm -f ~/.docker/config.json
  script:
    - make -C gitlab_build/docker/build staged_deploy_docker.tag || exit $?

# deploy docker image
deploy_docker:
  stage: deploy
  needs:
   - build_prepare
   - stage_docker
   - delay_release
  dependencies:
   - build_prepare
  rules:
   - if: $CI_MERGE_REQUEST_ID
     when: never
   - if: $CI_COMMIT_REF_PROTECTED == "true"
     when: on_success
   - when: never
  after_script:
    - rm -f ~/.docker/config.json
  script:
    # test whether we're current
    - docker/scripts/obsolete.sh || exit 0

    # build
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY 2>&1 | grep -v WARNING\|credential || exit $?
    - make -C gitlab_build/docker/build unstaged_deploy_docker.tag || exit $?

# deploy build to Gitlab
deploy_gitlab:
  stage: deploy
  dependencies:
   - build_prepare
   - build_collect
  rules:
   - if: $CI_MERGE_REQUEST_ID
     when: never
   - if: $CI_COMMIT_REF_PROTECTED == "true"
     when: on_success
   - when: never
  script:
    # test whether we're current
    - docker/scripts/obsolete.sh || exit 0

    # deploy
    - make -C gitlab_build/docker/build unstaged_deploy_gitlab || exit $?

# post-build tests
post_test:
  stage: build_collect
  script:
    - make -C gitlab_build/docker/build appimagetests_ci || exit $?

# pack up the downloadable build files in one handy artifact
pack:
  stage: stage
  needs:
   - build_collect
  dependencies:
   - build_collect
  script: [""]
  before_script:
    # test that everything has been prepared correctly
    - if ! test -d gitlab_build; then
    -  echo "No build yet!"
    -  exit 1
    - fi
    - find . -newer timestamp.tag ! -path "./gitlab_build" -exec touch -r timestamp.tag \{\} \;
    - if ! make -C gitlab_build/docker/build -q CI_pack.tag; then
    -  make -d -C gitlab_build/docker/build -q CI_pack.tag || exit $?
    -  exit 1
    - fi
    - ./docker/scripts/fix_gits.sh || exit $?
  artifacts:
    expire_in: 1 week
    paths:
      - gitlab_build/docker/build/upload




testbuild:
  stage: test
  rules:
   - when: never
  script:
    - docker build -t armagetronad_server .




# for local testing
complete_build:
  stage: build_main
  rules:
  - when: never
  script:
    - cd gitlab_build/docker/build
    - make -O -j$(nproc) CI_base
    - make -O -j$(nproc) CI
    
  artifacts:
    expire_in: 1 day
    paths:
      - gitlab_build/docker/build/upload
