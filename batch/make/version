#!/bin/sh
# determines the version of the sources
# usage: version <source directory>

#set -x

srcdir="$1"

# set version parts to defaults for CVS snapshot
major_version=`cat ${srcdir}/major_version`
DATE=`date +%Y%m%d`

#echo $major_version
#echo $minor_version

if test -d "${srcdir}/CVS"; then
    # get the date/branch/version tag
    rawtag=`cat ${srcdir}/CVS/Entries | grep major_version | sed -e "s,/major_version/.*/.*/.*/,,"`
    #echo $rawtag
    # determine the type of the tag
    echo $rawtag | grep "^D" > /dev/null && tagtype=D
    #echo $rawtag | grep "^Tb" > /dev/null && tagtype=Tb
    echo $rawtag | grep "^Tv" > /dev/null && tagtype=Tv
    #echo $tagtype

    # extract the raw tag
    tag=`echo $rawtag | sed -e "s,^$tagtype,,"`
    #echo $tag

    # date tag: make it a date dagged alpha release
    if test "$tagtype" = D; then
        DATE=`echo $tag | sed -e "s,\...\...\...\$,," | sed -e "s,\.,,g"`
        minor_version=`cat ${srcdir}/minor_version | sed -e "s,DATE,$DATE," -e "s,YYYYMMDD,$DATE,"`
    fi

    # version tag: take whole version, replace _[number] with .[number]
    if test "$tagtype" = Tv; then
        major_version=`echo $tag | sed -e "s,_\([0-9]\),\.\\1,g"`
        minor_version=""
        DATE=""
    fi
fi

if test -d "${srcdir}/.svn" || test -d "${srcdir}/../.svn"; then
    # get the inter-repository path by parsing the URL

    URL=`svn info ${srcdir} | grep ^URL | sed -e 's,^URL: ,,'`

    # uncomment the followint URLs to test various cases
    # trunk
    # URL=https://svn.sourceforge.net/svnroot/armagetronad/armagetronad/trunk/armagetronad
    # branch 0.4
    # URL=https://svn.sourceforge.net/svnroot/armagetronad/armagetronad/branches/0.4/armagetronad

    # tag 0.2.8.2
    # URL=https://svn.sourceforge.net/svnroot/armagetronad/armagetronad/tags/0.2.8.2/armagetronad

    #echo URL=$URL
    REPOPATH=`echo $URL | sed -e 's,/armagetronad$,,' -e 's,.*/armagetronad/,,'`
    #echo REPOPATH=$REPOPATH

    # is it a tag?
    if echo $REPOPATH | grep '^tags/' > /dev/null; then
        # echo Tag
        major_version=`echo $REPOPATH | sed -e 's,^tags/,,'`
        minor_version=""
        DATE=""
    else
        # make revision the alpha tag
        REVISION=`svn info ${srcdir} | grep ^Revision | sed -e 's,^Revision: ,,'`

        # is it a branch?
        if echo $REPOPATH | grep '^branches/' > /dev/null; then
            # echo Branch
            branch=`echo $REPOPATH | sed -e 's,^branches/,,'`
            # branch 0.2.8 produces 0.2.9 versions. Confusing, yeah, but moving it
            # in the repo is too risky.
            if test ${branch} = "0.2.8"; then
                # try to get revision ID from bzr using the magic bzr-svn marker
                # (only works this way on 0.2.8)
                REVISION=`svn propget bzr:revision-id:v3-list-QlpoOTFBWSZTWZvbKhsAAAdRgAAQABK6798QIABURMgAAaeoNT1TxT1DQbKaeobXKiyAmlWT7Y5MkdJOtXDtB7w7DOGFBHiOBxaUIu7HQyyQSvxdyRThQkJvbKhs ${srcdir} | tail -n 4 | sed -e 's, .*,,' | grep [0-9] | tail -n 1`
            else
                major_version=${branch}
            fi
        fi
        
        # trunk or branch

        #echo REVISION=$REVISION
        minor_version=_alpha_r$REVISION
        DATE=""
    fi
fi

# *TODO* once we get our superproject up on launchpad (and thus get saner branch nicks), use branch nicks for $major_version
# Check if bzr is installed, and if the path is versionned
bzr info ${srcdir} >/dev/null 2>&1
# But for now, ignore it
if test $? -eq 0
#if test 1 -eq 0
then
    # get revno
    revno=`bzr revno ${srcdir}`

    bzr diff ${srcdir} --quiet >/dev/null 2>&1
    # Test for the return code of bzr diff (see bzr diff --help)
    if test $? -eq 0
    then
        # If no change was made, use revision number (with offset to match svn revno)
        # but first check if it's tagged
        tag=$(bzr tags -r $revno | awk '{ print $1 }')
        if test $tag
        then
            # If it is tagged, use the tag
            DATE=_$tag
        else
            # If not, use revision number
            DATE=_r${revno}
        fi
    elif test $? -lt 3
    then
        # If a change was made, use revision number plus build date
        DATE=_r${revno}_$DATE
    # It returns 3 if it's not versionned, so forget it
    fi
fi

if test -z "$minor_version"
then
    test -z "$DATE" || minor_version=`cat ${srcdir}/minor_version | sed -e "s,DATE,$DATE," -e "s,YYYYMMDD,$DATE,"`
fi

echo $major_version$minor_version
