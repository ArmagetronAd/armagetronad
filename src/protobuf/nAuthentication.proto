// Protocol buffer types for nAuthentication.cpp
package Network;

/* Translation rules for data types:

  Stream type                ProtoBuf types
  short                      uint32
  int                        sint32, int32
  tString                    string

*/

// md5 message
message MD5Raw
{
    // raw, hacky md5 storage, only design goal: make it compatible with stream messages.
    optional sfixed32 a = 1;
    optional sfixed32 b = 2;
    optional sfixed32 c = 3;
    optional sfixed32 d = 4;

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

// hash values
message Hash
{
    optional MD5Raw md5_raw = 1;

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

// password query sent to client
message PasswordRequest
{
    optional Hash   nonce     = 1; // the nonce to scramble the password with
    optional string username_raw  = 2; // username (to be copied into login form)
    optional string message   = 3; // message to be displayed in login form

    optional bool   fail_last = 4 [default = true]; // true if the last login attempt failed; don't reuse stored passwords, then
    
    optional string method    = 5 [default = "bmd5"]; // hashing method
    optional string prefix_raw = 6; // prefix for hashing
    optional string suffix_raw = 7; // suffix for hashing    

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

// password answer from client to server
message PasswordAnswer
{
    optional Hash   answer    = 1; // the hash result from processing nonce
    optional string username_raw  = 2; // username
    
    optional bool aborted     = 3; // whether the user aborted the login    
    optional bool automatic   = 4; // whether the reply was automatic (with a pw from cache)

    optional string server_address = 5; // address of the server as the client sees it. It enters most good hash methods.

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

