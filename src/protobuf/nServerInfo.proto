// Protocol buffer types for nServerInfo.cpp
package Network;

import "nNetwork.proto";

/* Translation rules for data types:

  Stream type                ProtoBuf types
  short                      uint32, fixed32
  int                        sint32, int32
  tString                    string

*/

// minimal server info
message SmallServerInfoBase
{
    optional int32  port = 1;     // port of server
    optional string hostname = 2; // hostname/IP of server

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

// minimal server info, actual message
message SmallServerInfo
{
    optional SmallServerInfoBase base = 1; // base information

    optional int32      transaction = 2; // transaction number

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

// minimal server info request
message RequestSmallServerInfo
{
    optional int32      transaction = 1; // transaction number known to the client

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

// digest of the most important server settings
message SettingsDigest
{
    optional uint32 flags = 1; // flags, defined in nServerInfo.h

    optional int32 min_play_time_total = 2;   // minimal total play time in minutes required to play here
    optional int32 min_play_time_online = 3;  // minimal online play time in minutes required to play here
    optional int32 min_play_time_team = 4;    // minimal team play time in minutes required to play here

    optional float cycle_delay = 5;           // raw CYCLE_DELAY setting (or .05 if doublebinding is disabled)
    optional float acceleration = 6;          // acceleration/speed

    optional float rubber_wall_hump = 7;      // characteristic rubber number: rubber/(base speed*cycle_delay), the number of times you can hump a wall without suiciding
    optional float rubber_hit_wall_ratio = 8; // characteristic rubber number: maximum ratio of time spent sitting on walls to total time
    optional float walls_length = 9;          // wall length (relative to max speed, so unit is seconds)

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

// full server info
message BigServerInfo
{
    optional SmallServerInfoBase base = 1; // base information

    optional string name         = 2; // name of server
    optional int32  users        = 3; // number of connected clients

    optional VersionSync version = 4; // protocol version of server
    optional string release      = 5; // version of server as string

    optional int32 max_users     = 6; // maximum number of clients

    optional string usernames    = 7; // usernames of players
    optional string options      = 8; // info about server options
    optional string url          = 9; // server homepage
    
    optional string global_ids   = 10; // global IDs of players

    optional SettingsDigest settings = 11; // settings

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

// full server info request from server itself
message RequestBigServerInfo
{
    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}

// full server info request from master server
message RequestBigServerInfoMaster
{
    optional SmallServerInfoBase server = 1; // server to query

    // legacy message end marker, extensions go after it
    optional bool legacy_message_end_marker = 20000;
}
