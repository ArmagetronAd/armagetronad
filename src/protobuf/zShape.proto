// Protocol buffer types for zone v2 shapes

package Zone;

import "eNetGameObject.proto";
import "tFunction.proto";
import "tPolynomial.proto";
import "tColor.proto";

/* Translation rules for data types:

  Stream type                ProtoBuf types
  short                      uint32
  int                        sint32, int32
  tString                    string

*/

// sync message for shapes
message ShapeSync
{
    // base class init data, needs to come first
    optional Engine.NetGameObjectSync base = 1;

    optional float  creation_time = 2; // time of creation

    // legacy creation data end marker
    optional bool legacy_create_end = 20000;

    optional float reference_time = 4;  // zero point of the following functions        

    optional Tools.Function pos_x  = 5; // x position of center
    optional Tools.Function pos_y  = 6; // y position of center

    optional Tools.Function scale  = 7; // size scale of zone

    optional Tools.PolynomialSync rotation2 = 8; // rotation of the zone?

    optional Tools.Color color     = 9; // zone color ( rgba )

    // legacy sync data end marker
    optional bool legacy_sync_end = 20001;

    // extensions go here
    optional Tools.PolynomialSync segments = 10;
    optional Tools.PolynomialSync segment_length = 11;
    optional Tools.PolynomialSync pos_z_bottom = 12; // z bottom position of zone
    optional Tools.PolynomialSync height = 13;
    optional Tools.PolynomialSync segment_steps = 14;
    optional Tools.PolynomialSync floor_scale_pct = 15;
    optional Tools.PolynomialSync proximity_distance = 16;
    optional Tools.PolynomialSync proximity_offset = 17;
}

// sync message for circles
message ShapeCircleSync
{
    // base class init data, needs to come first
    optional ShapeSync base = 1;

    optional Tools.Function radius = 2; // radius of the circle
}

message FunctionPointSync
{
    optional Tools.Function x = 1; // x movement
    optional Tools.Function y = 2; // y movement
}

// sync message for circles
message ShapePolygonSync
{
    // base class init data, needs to come first
    optional ShapeSync base = 1;

    repeated FunctionPointSync points = 2; // the vertices
}
